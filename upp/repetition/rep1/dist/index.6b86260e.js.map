{"mappings":"AAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,AAAC;AACpD,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAmB,OAAO,CAAC,AAAC;AACpE,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAmB,OAAO,CAAC,AAAC;AAEpE,OAAO,CAAC,OAAO,CAAC,CAAA,MAAM,GAAI;IACtB,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAM;QACnC,IAAI;YACJ,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC,AAAC;YAChF,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,WAAW,GAAG,OAAO,CACnD,MAAM,EACN,MAAM,EACN,MAAM,CAAC,WAAW,CACrB,CAAC,QAAQ,EAAE,CAAC;SAChB,CACD,OAAO,KAAK,EAAE;YACV,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACvB;KACA,CAAC,CAAC;CACN,CAAC,CAAC;AAEH,SAAS,oBAAoB,CAAC,GAAG,MAAM,AAAU,EAAY;IACzD,MAAM,OAAO,GAAa,EAAE,AAAC;IAC7B,MAAM,CAAC,OAAO,CAAC,CAAA,KAAK,GAAI;QACpB,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,AAAC;QACtC,IAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EACxB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAA;QAElE,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC7B,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;CAClB;AAED,SAAS,OAAO,CAAC,MAAc,EAAE,MAAc,EAAE,QAAgB,EAAU;IACvE,OAAO,QAAQ;QACX,KAAK,GAAG;YAEJ,OAAO,MAAM,GAAG,MAAM,CAAC;QAC3B,KAAK,GAAG;YAEJ,OAAO,MAAM,GAAG,MAAM,CAAC;QAC3B,KAAK,GAAG;YAEJ,OAAO,MAAM,GAAG,MAAM,CAAC;QAC3B,KAAK,GAAG;YAEJ,OAAO,MAAM,GAAG,MAAM,CAAC;KAE9B;IACD,MAAM,IAAI,KAAK,CAAC,0BAA0B,GAAG,QAAQ,CAAC,CAAA;CACzD","sources":["app.ts"],"sourcesContent":["const buttons = document.querySelectorAll(\"button\");\r\nconst numInput1 = document.querySelector<HTMLInputElement>(\"#num1\");\r\nconst numInput2 = document.querySelector<HTMLInputElement>(\"#num2\");\r\n\r\nbuttons.forEach(button => {\r\n    button.addEventListener(\"click\", () => {\r\n        try {\r\n        const [value1, value2] = tryParseInputToFloat(numInput1.value, numInput2.value);\r\n        document.querySelector(\"#result\").textContent = compute(\r\n            value1,\r\n            value2,\r\n            button.textContent\r\n        ).toString();\r\n    }\r\n    catch (error) {\r\n        alert(error.message)\r\n    }\r\n    });\r\n});\r\n\r\nfunction tryParseInputToFloat(...values: string[]): number[] {\r\n    const numbers: number[] = [];\r\n    values.forEach(value => {\r\n        const parsedValue = parseFloat(value);\r\n        if(Number.isNaN(parsedValue)) {\r\n            throw new Error(\"Invalid input value, valid number required.\")\r\n        }\r\n        numbers.push(parsedValue);\r\n    });\r\n    return numbers;\r\n}\r\n\r\nfunction compute(value1: number, value2: number, operator: string): number {\r\n    switch(operator) {\r\n        case \"+\" :\r\n\r\n            return value1 + value2;\r\n        case \"-\" :\r\n\r\n            return value1 - value2;\r\n        case \"*\" :\r\n\r\n            return value1 * value2;\r\n        case \"/\" :\r\n\r\n            return value1 / value2;\r\n    \r\n    }\r\n    throw new Error(\"Unimplemented operator: \" + operator)\r\n};"],"names":[],"version":3,"file":"index.6b86260e.js.map","sourceRoot":"/__parcel_source_root/"}